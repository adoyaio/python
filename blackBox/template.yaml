AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Description: runAdoya entry point.
Globals:
  Api:
    # enable CORS; to make more specific, change the origin wildcard
    # to a particular domain name, e.g. "'www.example.com'"
    Cors:
      AllowMethods: "'*'"
      AllowHeaders: "'x-api-key,Access-Control-Allow-Headers, Origin, Accept, X-Requested-With, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers, Authorization'"
      AllowOrigin: "'*'"
# Parameters:
#   CognitoUserPoolArn: "arn:aws:cognito-idp:us-east-1:496475828721:userpool/us-east-1_eeW2PLi0U"
#     Description: ARN of the Cognito User Pool
#     Type: String
#     Value:  ???
Resources:
  # Cognito User Pools Authorizer
  # AuthorizersCognitoUserPools:
  #   Type: AWS::ApiGateway::Authorizer
  #   Properties:
  #     Name: CognitoAuthorizer
  #     Type: COGNITO_USER_POOLS
  #     RestApiId: !Ref adoyaApi
  #     IdentitySource: method.request.header.authorizationToken
  #     ProviderARNs:
  #       - !Ref CognitoUserPoolArn
  # adoyaApi:
  #   Type: AWS::ApiGateway::RestApi
  #   Properties:
  #     Name: adoyaApi
  # adoyaApi:
  #   Type: AWS::Serverless::Api
  #   Properties:
  #     StageName: Prod
  #     Auth:
  #       DefaultAuthorizer: adoyaAuthorizer
  #       Authorizers:
  #         adoyaAuthorizer:
  #           UserPoolArn: "arn:aws:cognito-idp:us-east-1:496475828721:userpool/us-east-1_eeW2PLi0U"
  runAdoyaNightly:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: runAdoyaNightly.lambda_handler
      Runtime: python3.8
      CodeUri: .
      Description: ""
      MemorySize: 448
      Timeout: 900
      FunctionName: "runAdoyaNightly"
      Role: "arn:aws:iam::496475828721:role/service-role/lambda_dynamo"
  runClient:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: runClient.lambda_handler
      Runtime: python3.8
      CodeUri: .
      Description: ""
      MemorySize: 1000
      Timeout: 900
      FunctionName: "runClient"
      Role: "arn:aws:iam::496475828721:role/service-role/lambda_dynamo"
      EventInvokeConfig:
        MaximumRetryAttempts: 0
  runAdoyaBiweekly:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: runAdoyaBiweekly.lambda_handler
      Runtime: python3.8
      CodeUri: .
      Description: ""
      MemorySize: 1000
      Timeout: 900
      FunctionName: "runAdoyaBiweekly"
      Role: "arn:aws:iam::496475828721:role/service-role/lambda_dynamo"
      EventInvokeConfig:
        MaximumRetryAttempts: 0
  runAdoyaWeekly:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: runAdoyaWeekly.lambda_handler
      Runtime: python3.8
      CodeUri: .
      Description: ""
      MemorySize: 448
      Timeout: 900
      FunctionName: "runAdoyaWeekly"
      Role: "arn:aws:iam::496475828721:role/service-role/lambda_dynamo"
  postClientAdmin:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: clientApi.postClientAdminHandler
      Runtime: python3.8
      CodeUri: .
      Description: "Internal use 'shortcut' endpoint for admins, supports read, update, delete, & list operations on any table"
      MemorySize: 448
      Timeout: 60
      FunctionName: "postClientAdmin"
      Role: "arn:aws:iam::496475828721:role/service-role/lambda_dynamo"
      Environment:
        Variables:
          env: "prod"
      Events:
        Api:
          Type: Api
          Properties:
            Path: /api/client/admin
            Method: post
            Auth:
              # Authorizer: adoyaAuthorizer
              ApiKeyRequired: true
  getClientKeywordHistory:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: clientApi.getClientKeywordHistoryHandler
      Runtime: python3.8
      CodeUri: .
      Description: ""
      MemorySize: 448
      Timeout: 60
      FunctionName: "getClientKeywordHistory"
      Role: "arn:aws:iam::496475828721:role/service-role/lambda_dynamo"
      Environment:
        Variables:
          env: "prod"
      Events:
        Api:
          Type: Api
          Properties:
            Path: /api/client/keyword/history/
            Method: GET
            Auth:
              ApiKeyRequired: true
  getClientCostHistory:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: clientApi.getClientCostHistoryHandler
      Runtime: python3.8
      CodeUri: .
      Description: ""
      MemorySize: 448
      Timeout: 60
      FunctionName: "getClientCostHistory"
      Role: "arn:aws:iam::496475828721:role/service-role/lambda_dynamo"
      Environment:
        Variables:
          env: "prod"
      Events:
        Api:
          Type: Api
          Properties:
            Path: /api/client/cost/history
            Method: GET
            Auth:
              ApiKeyRequired: true
  getClientCampaignHistory:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: clientApi.getClientCampaignHistoryHandler
      Runtime: python3.8
      CodeUri: .
      Description: ""
      MemorySize: 448
      Timeout: 60
      FunctionName: "getClientCampaignHistoryHandler"
      Role: "arn:aws:iam::496475828721:role/service-role/lambda_dynamo"
      Environment:
        Variables:
          env: "prod"
      Events:
        Api:
          Type: Api
          Properties:
            Path: /api/client/campaign/history
            Method: GET
            Auth:
              ApiKeyRequired: true
  postSupportItem:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: supportApi.postSupportItemHandler
      Runtime: python3.8
      CodeUri: .
      Description: ""
      MemorySize: 448
      Timeout: 60
      FunctionName: "postSupportItem"
      Role: "arn:aws:iam::496475828721:role/service-role/lambda_dynamo"
      Environment:
        Variables:
          env: "prod"
      Events:
        Api:
          Type: Api
          Properties:
            Path: /api/support/post
            Method: ANY
            Auth:
              ApiKeyRequired: true
  postClient:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: clientApi.postClientHandler
      Runtime: python3.8
      CodeUri: .
      Description: ""
      MemorySize: 448
      Timeout: 60
      FunctionName: "postClient"
      Role: "arn:aws:iam::496475828721:role/service-role/lambda_dynamo"
      Environment:
        Variables:
          env: "prod"
      Events:
        Api:
          Type: Api
          Properties:
            Path: /api/client/post
            Method: ANY
            Auth:
              ApiKeyRequired: true
  patchClient:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: clientApi.patchClientHandler
      Runtime: python3.8
      CodeUri: .
      Description: ""
      MemorySize: 448
      Timeout: 60
      FunctionName: "patchClient"
      Role: "arn:aws:iam::496475828721:role/service-role/lambda_dynamo"
      Environment:
        Variables:
          env: "prod"
      Events:
        Api:
          Type: Api
          Properties:
            Path: /api/client/patch
            Method: ANY
            Auth:
              ApiKeyRequired: true
  getAppleApps:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: appleApi.getAppleApps
      Runtime: python3.8
      CodeUri: .
      Description: ""
      MemorySize: 448
      Timeout: 60
      FunctionName: "getAppleApps"
      Role: "arn:aws:iam::496475828721:role/service-role/lambda_dynamo"
      Environment:
        Variables:
          env: "prod"
      Events:
        Api:
          Type: Api
          Properties:
            Path: /api/apple/apps
            Method: ANY
            Auth:
              ApiKeyRequired: true
  getClient:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: clientApi.getClientHandler
      Runtime: python3.8
      CodeUri: .
      Description: ""
      MemorySize: 448
      Timeout: 60
      FunctionName: "getClient"
      Role: "arn:aws:iam::496475828721:role/service-role/lambda_dynamo"
      Environment:
        Variables:
          env: "prod"
      Events:
        Api:
          Type: Api
          Properties:
            Path: /api/client/get
            Method: GET
            Auth:
              ApiKeyRequired: true
  getAppleAcls:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: appleApi.getAppleAcls
      Runtime: python3.8
      CodeUri: .
      Description: ""
      MemorySize: 448
      Timeout: 60
      FunctionName: "getAppleAcls"
      Role: "arn:aws:iam::496475828721:role/service-role/lambda_dynamo"
      Environment:
        Variables:
          env: "prod"
      Events:
        Api:
          Type: Api
          Properties:
            Path: /api/apple/acls
            Method: ANY
            Auth:
              ApiKeyRequired: true
  getAppleAuth:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: appleApi.getAppleAuth
      Runtime: python3.8
      CodeUri: .
      Description: ""
      MemorySize: 448
      Timeout: 60
      FunctionName: "getAppleAuth"
      Role: "arn:aws:iam::496475828721:role/service-role/lambda_dynamo"
      Environment:
        Variables:
          env: "prod"
      Events:
        Api:
          Type: Api
          Properties:
            Path: /api/apple/auth
            Method: ANY
            Auth:
              ApiKeyRequired: true
  postAppleCampaign:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: appleApi.postAppleCampaign
      Runtime: python3.8
      CodeUri: .
      Description: ""
      MemorySize: 1000
      Timeout: 900
      FunctionName: "postAppleCampaign"
      Role: "arn:aws:iam::496475828721:role/service-role/lambda_dynamo"
      Environment:
        Variables:
          env: "prod"
      Events:
        Api:
          Type: Api
          Properties:
            Path: /api/apple/campaign/post
            Method: ANY
            Auth:
              ApiKeyRequired: true
  patchAppleCampaign:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: appleApi.patchAppleCampaign
      Runtime: python3.8
      CodeUri: .
      Description: ""
      MemorySize: 1000
      Timeout: 900
      FunctionName: "patchAppleCampaign"
      Role: "arn:aws:iam::496475828721:role/service-role/lambda_dynamo"
      Environment:
        Variables:
          env: "prod"
      Events:
        Api:
          Type: Api
          Properties:
            Path: /api/apple/campaign/patch
            Method: ANY
            Auth:
              ApiKeyRequired: true
  createClientPemKey:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: clientApi.createClientPemKeyHandler
      Runtime: python3.8
      CodeUri: .
      Description: ""
      MemorySize: 448
      Timeout: 60
      FunctionName: "createClientPemKey"
      Role: "arn:aws:iam::496475828721:role/service-role/lambda_dynamo"
      Environment:
        Variables:
          env: "prod"
      Events:
        Api:
          Type: Api
          Properties:
            Path: /api/client/createPemKey
            Method: ANY
            Auth:
              ApiKeyRequired: true
  postStripeCustomer:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: stripeApi.postStripeCustomer
      Runtime: python3.8
      CodeUri: .
      Description: ""
      MemorySize: 1000
      Timeout: 900
      FunctionName: "postStripeCustomer"
      Role: "arn:aws:iam::496475828721:role/service-role/lambda_dynamo"
      Environment:
        Variables:
          env: "prod"
      Events:
        Api:
          Type: Api
          Properties:
            Path: /api/stripe/customer/post
            Method: ANY
            Auth:
              ApiKeyRequired: true
